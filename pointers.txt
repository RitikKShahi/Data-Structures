A pointer is a variable that stores the memory address of another variable.
int a=10;
int *p=&a;


Pointer Declaration
int* ptr;     // pointer to int
char* cptr;   // pointer to char
float* fptr;  // pointer to float


 Key Pointer Operators
& (Address-of): gets the address of a variable
* (Dereference): accesses the value at the address
int a = 5;
int* p = &a;
cout << &a << endl;   // Address of a
cout << p << endl;    // Address stored in pointer (same as &a)
cout << *p << endl;   // Value at the address (i.e., 5)


Pointer Arithmetic (only on arrays)
int arr[3] = {10, 20, 30};
int* p = arr;

cout << *(p + 1); // 20


Pointers to Pointers
int a = 10;
int* p = &a;
int** pp = &p;
cout << **pp;  // 10


 Dynamic Memory (Heap Allocation)
int* ptr = new int;     // Allocates memory
*ptr = 5;
delete ptr;             // Frees memory


For arrays:
int* arr = new int[5];  // Dynamic array
delete[] arr;